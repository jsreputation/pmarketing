alias:
  helm_executor: &helm_executor
    name: helm-deploy/default
    docker_tag: '2.16.1'
  kubeconfig_parameters: &kubeconfig_parameters
    kube_host:
      type: env_var_name
      description: host for kubeconfig
    kube_bearer_token:
      type: env_var_name
      description: breaker token for kubeconfig
    kube_cluster_ca_cert_data:
      type: env_var_name
      description: certificate data for kubeconfig
  docker_tag_parameter: &docker_tag_parameter
    docker_tag:
      type: string
      description: The docker tag to deploy
      default: "${CIRCLE_SHA1:0:7}"
version: 2.1
orbs:
  helm-deploy: perxtech/helm-deploy@0.0.5
executors:
  ubuntu:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: << parameters.docker_layer_caching >>
    working_directory: ~/project
    parameters:
      docker_layer_caching:
        default: true
        type: boolean
commands:
  get_app_name:
    description: Sets app name, environment, namespace out of git tag
    steps:
      - run:
          name: Setup app, environment, namespace variables
          command: |
            REGEX="([[:alnum:]-]+)-(uat|staging|production)-?([[:alnum:]-]*)-([0-9]+\.[0-9]+\.[0-9]+-?[0-9]*)"
            if [[ "${CIRCLE_TAG}" =~ $REGEX ]]; then
              echo "export APP=${BASH_REMATCH[1]}" >> $BASH_ENV
              echo "export TARGET_ENV=${BASH_REMATCH[2]}" >> $BASH_ENV
              if [[ ${BASH_REMATCH[3]} == "" ]]; then
                echo "export TARGET_NAMESPACE=master" >> $BASH_ENV
              else
                echo "export TARGET_NAMESPACE=${BASH_REMATCH[3]}" >> $BASH_ENV
              fi
              echo "export SEM_VER=${BASH_REMATCH[4]}" >> $BASH_ENV
            else
              echo "Error! Unrecognized tag"
            fi
            source $BASH_ENV
            echo "APP: $APP"
            echo "TARGET_ENV: $TARGET_ENV"
            echo "TARGET_NAMESPACE: $TARGET_NAMESPACE"
            echo "SEM_VER: $SEM_VER"
  set_apihost:
    description: based on environment set the APIHOST
    steps:
      - run:
          name: Setup APIHOST var
          command: |
            if [ $APP == 'blackcomb' ] || [ $APP == 'candyland' ]; then
              if [ ${TARGET_ENV} == 'uat' ]; then
                if [ $TARGET_NAMESPACE == 'master' ]; then
                  APIHOST="https://api.uat.whistler.perxtech.io"
                else
                  APIHOST="https://api-${TARGET_NAMESPACE}.${TARGET_ENV}.whistler.perxtech.io"
                fi
              elif [ ${TARGET_ENV} == 'staging' ]; then
                APIHOST="https://api.staging.whistler.perxtech.io"
              elif [ ${TARGET_ENV} == 'production' ]; then
                APIHOST="https://api.whistler.perxtech.io"
              fi
            else
              if [ ${TARGET_ENV} == 'staging' ]; then
                APIHOST="https://api.perxtech.io"
              elif [ ${TARGET_ENV} == 'production' ]; then
                if [ $APP == 'hsbc' ] || [ $APP == 'hsbc-rewards' ] || [ $APP == 'hsbc-xmas' ]
                then
                  APIHOST="https://api-hsbc.perxtech.net"
                elif [ $APP == 'starhub' ]; then
                  APIHOST="https://api-starhub.perxtech.net"
                else
                  APIHOST="https://api.getperx.net"
                fi
              fi
            fi
            echo "export APIHOST=$APIHOST" >> $BASH_ENV
            echo $APIHOST
  set_preauth:
    description: based on client set the PREAUTH
    steps:
      - run:
          name: Setup PREAUTH var
          command: |
            if [ $APP == 'prudential' ] || [ $APP == 'digi' ] || [ $APP == 'blackcomb' ] || [ $APP == 'bpi' ]
            then
              PREAUTH="true"
            else
              PREAUTH="false"
            fi
            echo "export PREAUTH=$PREAUTH" >> $BASH_ENV
            echo $PREAUTH
  set_basehref:
    description: based on client set deploy endpoint base href
    steps:
      - run:
          name: Setup BASE_HREF var
          command: |
            if [ $APP == 'hsbc' ]
            then
              BASE_HREF="/site/hsbc/collect2/"
            elif [ $APP == 'hsbc-rewards' ]
            then
              BASE_HREF="/site/hsbc/rewardscatalogue/"
            elif [ $APP == 'hsbc-xmas' ]
            then
              BASE_HREF="/site/hsbc/xmas/"
            else
              BASE_HREF="/"
            fi
            echo "export BASE_HREF=$BASE_HREF" >> $BASH_ENV
            echo $BASE_HREF
  set_sourcetype:
    description: based on client set source type for app
    steps:
      - run:
          name: Setup SOURCE_TYPE var
          command: |
            if [ $APP == 'hsbc' ]
            then
              SOURCE_TYPE="hsbc-collect2"
            elif [ $APP == 'hsbc-rewards' ]
            then
              SOURCE_TYPE="hsbc-rewards"
            elif [ $APP == 'hsbc-xmas' ]
            then
              SOURCE_TYPE="hsbc-xmas"
            fi
            echo "export SOURCE_TYPE=$SOURCE_TYPE" >> $BASH_ENV
            echo $SOURCE_TYPE
  set_iswhistler:
    description: based on client deploy endpoint base href
    steps:
      - run:
          name: Setup IS_WHISTLER var
          command: |
            if [ $APP == 'blackcomb' ]
            then
              IS_WHISTLER="true"
            else
              IS_WHISTLER="false"
            fi
            echo "export IS_WHISTLER=$IS_WHISTLER" >> $BASH_ENV
            echo $IS_WHISTLER
  set_redirect_dest:
    description: customise the app landing page after login
    steps:
      - run:
          name: Setup REDIRECT_AFTER_LOGIN var
          command: |
            if [ $APP == 'petron-demo' ] || \
               [ $APP == 'oracle-demo' ] || \
               [ $APP == 'feature-demo' ] || \
               [ $APP == 'all-it' ] || \
               [ $APP == 'partners-demo' ] || \
               [ $APP == 'perx-demo' ] || \
               [ $APP == 'perx-demo2' ] || \
               [ $APP == 'perx-demo3' ] || \
               [ $APP == 'perx-demo4' ]
            then
              REDIRECT_AFTER_LOGIN="/home"
            elif [ $APP == 'blackcomb' ]
            then
              REDIRECT_AFTER_LOGIN="/wallet"
            fi
            echo "export REDIRECT_AFTER_LOGIN=$REDIRECT_AFTER_LOGIN" >> $BASH_ENV
            echo $REDIRECT_AFTER_LOGIN
  setup_buildkitd:
    description: Enable docker experimental feature and setup buildkit environment
    steps:
      - run:
          name: Setup buildkit environment variable
          command: |
            echo 'export DOCKER_BUILDKIT=1' >> $BASH_ENV
  docker_login:
    description: Login to Dockerhub
    steps:
      - run:
          name: Login to dockerhub
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin
jobs:
  build_proxy_docker_image:
    working_directory: ~/project
    executor: ubuntu
    steps:
      - checkout
      - docker_login
      - run:
          name: Build docker image
          command: |
            cd ~/project/backend/api-proxy &&
            docker build . -t perxtech/engagements-proxy:${CIRCLE_TAG} -t perxtech/engagements-proxy
      - run:
          name: Push docker
          command: |
            docker push perxtech/engagements-proxy:${CIRCLE_TAG}
            docker push perxtech/engagements-proxy
  build_docker_image:
    working_directory: ~/project
    executor: ubuntu
    steps:
      - checkout
      - docker_login
      - get_app_name
      - set_apihost
      - set_preauth
      - set_basehref
      - set_iswhistler
      - set_sourcetype
      - set_redirect_dest
      - run:
          name: Build docker image
          command: |
            echo "APP: ${APP}"
            echo "APIHOST: ${APIHOST}"
            echo "BASE_HREF: ${BASE_HREF}"
            echo "Docker Tag: ${CIRCLE_SHA1:0:7}"
            echo "Docker Tag: ${CIRCLE_SHA1:0:7}"
            echo "IS_WHISTLER: ${IS_WHISTLER}"
            echo "SOURCE_TYPE: ${SOURCE_TYPE}"
            if [ $APP == 'candyland' ]
            then
              export APP="candyland"
            elif [ $APP == 'hsbc-xmas' ]
            then
              export APP="hsbc"
            elif [ $APP == 'perx-demo2' ] || \
            [ $APP == 'perx-demo3' ] || \
            [ $APP == 'perx-demo4' ]
            then
              export APP="perx-demo"
            fi
            echo "after second set APP: ${APP}"

            if [ $APP == 'petron-demo' ] || \
            [ $APP == 'oracle-demo' ] || \
            [ $APP == 'daiichi' ] || \
            [ $APP == 'feature-demo' ] || \
            [ $APP == 'partners-demo' ] || \
            [ $APP == 'perx-demo' ]
            then
              export APP_BASE="blackcomb"
            else
              export APP_BASE=$APP
            fi
            echo "APP_BASE: ${APP_BASE}"

            export APP_ENV="prod"
            if [[ ( $APP == 'starhub' ||
            $APP == 'perx-demo' ||
            $APP == 'abenson' ||
            $APP == 'daiichi') && $TARGET_ENV != 'production' ]]
            then
              export APP_ENV="staging"
            fi

            docker build . -t ${DOCKER_REPO}:${CIRCLE_TAG} \
            --no-cache \
            --build-arg app=$APP \
            --build-arg apihost=$APIHOST \
            --build-arg basehref=$BASE_HREF \
            --build-arg preauth=$PREAUTH \
            --build-arg iswhistler=$IS_WHISTLER \
            --build-arg sourcetype=$SOURCE_TYPE \
            --build-arg env=$APP_ENV \
            --build-arg appbase=$APP_BASE \
            --build-arg redirectdest=$REDIRECT_AFTER_LOGIN
      - run:
          name: Push docker
          command: |
            docker push ${DOCKER_REPO}:${CIRCLE_TAG}
  deploy:
    executor: *helm_executor
    parameters:
      <<: *docker_tag_parameter
      <<: *kubeconfig_parameters
    steps:
      - get_app_name
      - run:
          name: Set environments
          command: |
            echo 'export DOCKER_TAG="<< parameters.docker_tag >>"' >> $BASH_ENV
            echo 'export HELM_REPO_URL=https://chartmuseum.perxtech.io' >> $BASH_ENV
            echo 'export HELM_APP="$APP"' >> $BASH_ENV

            if [ $APP == 'prudential' ]
            then
              echo 'export HELM_APP="$APP-birthday"' >> $BASH_ENV
            fi
            if [ $APP == 'hsbc' ]
            then
              echo 'export HELM_APP="$APP-collect2"' >> $BASH_ENV
            fi
            if [ $APP == 'digi' ]
            then
              echo 'export HELM_APP="$APP-minigames"' >> $BASH_ENV
            fi
            if [ $APP == 'bpi'  ] || \
               [ $APP == 'merck-customer' ] || \
               [ $APP == 'hkbn' ]
            then
              echo 'export HELM_APP="$APP-rewards"' >> $BASH_ENV
            fi
            if [ $APP == 'candyland' ] || \
               [ $APP == 'candyland-uat' ]
            then
              echo 'export HELM_APP="perx-$APP"' >> $BASH_ENV
            fi
            if [ $APP == 'merck-merchant' ]
            then
              echo 'export HELM_APP="$APP-scanner"' >> $BASH_ENV
            fi
      # requires env set: HELM_REPO_URL HELM_USER HELM_PASSWORD
      - helm-deploy/add-helm-repo:
          helm_repo_name: perx
      # requires env set: KUBE_HOST KUBE_CLUSTER_CA_CERT_DATA KUBE_BEARER_TOKEN
      - helm-deploy/configure-kubectl:
          kube_host: "<< parameters.kube_host >>"
          kube_bearer_token: "<< parameters.kube_bearer_token >>"
          kube_cluster_ca_cert_data: "<< parameters.kube_cluster_ca_cert_data >>"
      - helm-deploy/deploy:
          helm_release: microsite-apps-$HELM_APP
          helm_chart: perx/perx-general-app
          helm_values: image.tag="${DOCKER_TAG}"
          helm_extra_args: --reuse-values --timeout 600
  # deploy-to-aws:
  #   executor: *helm_executor
  #   parameters:
  #     <<: *docker_tag_parameter
  #     <<: *kubeconfig_parameters
  #     domain:
  #       type: string
  #       description: App domain name. Should be perxtech.net for production or perxtech.io for staging
  #   steps:
  #     - checkout
  #     - get_app_name
  #     - run:
  #         name: Set environments
  #         command: |
  #           echo "export DOCKER_TAG=<< parameters.docker_tag >>" >> $BASH_ENV
  #           echo "export HELM_REPO_URL=https://chartmuseum.perxtech.io" >> $BASH_ENV
  #           echo "export SKAFFOLD_DEFAULT_REPO=perxtech" >> $BASH_ENV
  #           echo "export DOMAIN=<< parameters.domain >>" >> $BASH_ENV
  #     - helm-deploy/add-helm-repo:
  #         helm_repo_name: perx
  #     - helm-deploy/configure-kubectl:
  #         kube_host: "<< parameters.kube_host >>"
  #         kube_bearer_token: "<< parameters.kube_bearer_token >>"
  #         kube_cluster_ca_cert_data: "<< parameters.kube_cluster_ca_cert_data >>"
  #     - run:
  #         name: Install skaffold
  #         command: |
  #           curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
  #           chmod +x skaffold
  #     - run:
  #         name: Deploy microsite app
  #         command: |
  #           ./skaffold deploy -f .circleci/skaffold/knative-microsite-app.yaml
  deploy-whistler:
    executor: *helm_executor
    parameters:
      <<: *docker_tag_parameter
      <<: *kubeconfig_parameters
    steps:
      - checkout
      - get_app_name
      - run:
          name: Set environments
          command: |
            echo 'export DOCKER_TAG="<< parameters.docker_tag >>"' >> $BASH_ENV
            echo 'export TILLER_NAMESPACE="${TARGET_NAMESPACE}"-whistler' >> $BASH_ENV
            echo 'export SKAFFOLD_NAMESPACE="${TARGET_NAMESPACE}"-whistler' >> $BASH_ENV
            echo 'export SKAFFOLD_DEFAULT_REPO=perxtech' >> $BASH_ENV
            echo 'export HELM_REPO_URL=https://rails-on-services.github.io/helm-charts' >> $BASH_ENV
            echo 'export HELM_APP="$APP"' >> $BASH_ENV
            if [ $APP == 'candyland' ]; then
              if [ $TARGET_ENV == 'production' ]; then
                INGRESS_HOST="candyland.whistler.perxtech.io"
              elif [ $TARGET_ENV == 'staging' ]; then
                INGRESS_HOST="candyland.staging.whistler.perxtech.io"
              else
                if [ $TARGET_NAMESPACE == 'master' ]; then
                  INGRESS_HOST="candyland.${TARGET_ENV}.whistler.perxtech.io"
                else
                  INGRESS_HOST="candyland-${TARGET_NAMESPACE}.${TARGET_ENV}.whistler.perxtech.io"
                fi
              fi
            elif [ $APP == 'blackcomb' ]; then
              if [ $TARGET_ENV == 'production' ]; then
                INGRESS_HOST="*-blackcomb.whistler.perxtech.io"
              elif [ $TARGET_ENV == 'staging' ]; then
                INGRESS_HOST="*-blackcomb.staging.whistler.perxtech.io"
              else
                if [ $TARGET_NAMESPACE == 'master' ]; then
                  INGRESS_HOST="*-blackcomb.${TARGET_ENV}.whistler.perxtech.io"
                else
                  INGRESS_HOST="*-blackcomb-${TARGET_NAMESPACE}.${TARGET_ENV}.whistler.perxtech.io"
                fi
              fi
            fi
            echo "export APIHOST=$APIHOST" >> $BASH_ENV
            echo "export INGRESS_HOST=$INGRESS_HOST" >> $BASH_ENV
            echo $APIHOST
            echo $INGRESS_HOST
      - helm-deploy/add-helm-repo:
          helm_repo_name: ros
      - helm-deploy/configure-kubectl:
          kube_host: "<< parameters.kube_host >>"
          kube_bearer_token: "<< parameters.kube_bearer_token >>"
          kube_cluster_ca_cert_data: "<< parameters.kube_cluster_ca_cert_data >>"
      - run:
          name: Install skaffold
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
            chmod +x skaffold
      - run:
          name: Deploy microsite app and ingress
          command: ./skaffold deploy -f .circleci/skaffold/microsites-app-ng-${APP}.yaml --images perxtech/microsite-apps-ng
  test-e2e-protractor:
    docker:
      - image: circleci/node:10-browsers
    resource_class: xlarge
    steps:
      - checkout
      - run: yarn install
      - run: yarn run build:candyland:prod
      - run: yarn run pree2e-ci ## need to run webdriver-manager update before protractor e2e runs
      - run: yarn run e2e-ci-pro-candyland
  build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - run:
          name: Install yarn
          command: |
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo killall -9 apt-get || true && sudo apt-get update && sudo apt-get install -y yarn=1.16.0-1
      - run: |
          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
          echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Switch to latest node version
          command: |
            nvm install v10
            nvm alias default v10
      - checkout
      - run: yarn install
      - run: yarn run build
workflows:
  build_and_deploy:
    jobs:
      # - build:
      #     filters:
      #       tags:
      #         # this enables circleci to trigger on tags
      #         only: /.*/
      - build_docker_image:
          filters:
            tags:
              # this enables circleci to trigger on tags
              only: /^[\w-]+-(production|staging|uat)-(\w+-)?\d+\.\d+\.\d+.*/
            branches:
              ignore: /.*/
      - deploy-whistler:
          name: deploy_to_whistler_uat
          docker_tag: "${CIRCLE_TAG}"
          kube_host: WHISTLER_UAT_KUBE_HOST
          kube_cluster_ca_cert_data: WHISTLER_UAT_KUBE_CLUSTER_CA_CERT_DATA
          kube_bearer_token: WHISTLER_UAT_KUBE_BEARER_TOKEN
          requires:
            - build_docker_image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /(candyland|blackcomb)-uat-(\w+)-\d+\.\d+\.\d+.*/
      - deploy-whistler:
          name: deploy_to_whistler_staging
          docker_tag: "${CIRCLE_TAG}"
          kube_host: WHISTLER_STAGING_KUBE_HOST
          kube_cluster_ca_cert_data: WHISTLER_STAGING_KUBE_CLUSTER_CA_CERT_DATA
          kube_bearer_token: WHISTLER_STAGING_KUBE_BEARER_TOKEN
          requires:
            - build_docker_image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /(candyland|blackcomb)-staging-\d+\.\d+\.\d+.*/
      - deploy-whistler:
          name: deploy_to_whistler_production
          docker_tag: "${CIRCLE_TAG}"
          kube_host: WHISTLER_PRODUCTION_KUBE_HOST
          kube_bearer_token: WHISTLER_PRODUCTION_KUBE_BEARER_TOKEN
          kube_cluster_ca_cert_data: WHISTLER_PRODUCTION_KUBE_CLUSTER_CA_CERT_DATA
          requires:
            - build_docker_image
            # - build
          filters:
            # need to sepcify this otherwise the job will run even if there's no tag
            branches:
              ignore: /.*/
            tags:
              # semver v2
              only: /(candyland|blackcomb)-production-\d+\.\d+\.\d+.*/
      # - deploy-to-aws:
      #     name: deploy_to_aws_production
      #     docker_tag: "${CIRCLE_TAG}"
      #     kube_host: AWS_PRODUCTION_KUBE_HOST
      #     kube_bearer_token: AWS_PRODUCTION_KUBE_BEARER_TOKEN
      #     kube_cluster_ca_cert_data: AWS_PRODUCTION_KUBE_CLUSTER_CA_CERT_DATA
      #     domain: perxtech.net
      #     requires:
      #       - build_docker_image
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^(perx-demo|partners-demo)-production-\d+\.\d+\.\d+.*/
      # - deploy-to-aws:
      #     name: deploy_to_aws_staging
      #     docker_tag: "${CIRCLE_TAG}"
      #     kube_host: AWS_STAGING_KUBE_HOST
      #     kube_bearer_token: AWS_STAGING_KUBE_BEARER_TOKEN
      #     kube_cluster_ca_cert_data: AWS_STAGING_KUBE_CLUSTER_CA_CERT_DATA
      #     domain: perxtech.io
      #     requires:
      #       - build_docker_image
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^(perx-demo|partners-demo)-staging-\d+\.\d+\.\d+.*/

      # - deploy:
      #     name: deploy_to_staging
      #     docker_tag: "${CIRCLE_TAG}"
      #     kube_host: STAGING_KUBE_HOST
      #     kube_cluster_ca_cert_data: STAGING_KUBE_CLUSTER_CA_CERT_DATA
      #     kube_bearer_token: STAGING_KUBE_BEARER_TOKEN
      #     requires:
      #       - build_docker_image
      #     filters:
      #       branches:
      #         ignore: /.*/
      #       tags:
      #         only: /^(?!blackcomb|candyland|oracle-demo|perx-demo|partners-demo)(\w+-)+staging-\d+\.\d+\.\d+.*/
      - deploy:
          name: deploy_to_production
          docker_tag: "${CIRCLE_TAG}"
          kube_host: PRODUCTION_KUBE_HOST
          kube_bearer_token: PRODUCTION_KUBE_BEARER_TOKEN
          kube_cluster_ca_cert_data: PRODUCTION_KUBE_CLUSTER_CA_CERT_DATA
          requires:
            - build_docker_image
            # - build
          filters:
            # need to sepcify this otherwise the job will run even if there's no tag
            branches:
              ignore: /.*/
            tags:
              # semver v2
              only: /^(bpi|prudential)-production-\d+\.\d+\.\d+.*/
      - build_proxy_docker_image:
          filters:
            # need to sepcify this otherwise the job will run even if there's no tag
            branches:
              ignore: /.*/
            tags:
              # semver v2
              only: /engagements-proxy-\d+\.\d+\.\d+.*/

daily_e2e_run_morning:
  triggers:
    - schedule:
        # 12 noon SGT
        cron: "0 4 * * *"
        filters:
          branches:
            only:
              - master
  jobs:
    - test-e2e-protractor
daily_e2e_run_evening:
  triggers:
    - schedule:
        # 5.00 pm SGT
        cron: "0 9 * * *"
        filters:
          branches:
            only:
              - master
  jobs:
    - test-e2e-protractor
