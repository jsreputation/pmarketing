version: 2.1
orbs:
  helm-deploy: perxtech/helm-deploy@0.0.4
executors:
  ubuntu:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: << parameters.docker_layer_caching >>
    working_directory: ~/project
    parameters:
      docker_layer_caching:
        default: true
        type: boolean
commands:
  get_app_name:
    description: Sets app name, environment, namespace out of git tag
    steps:
      - run:
          name: Setup app, environment, namespace variables
          command: |
            COUNT=$(echo ${CIRCLE_TAG} | tr "-" "\n" | wc -l)
            if [ ${COUNT} -eq 3 ]
            then
              SEM_VER=$(echo ${CIRCLE_TAG} | tr "-" "\n" | tail -n1 | head -n1)
              TARGET_ENV=$(echo ${CIRCLE_TAG} | tr "-" "\n" | tail -n2 | head -n1)
              CUT=-${TARGET_ENV}-${SEM_VER}
              APP=${CIRCLE_TAG%"$CUT"}
            elif [ ${COUNT} -eq 4 ]
            then
              SEM_VER=$(echo ${CIRCLE_TAG} | tr "-" "\n" | tail -n1 | head -n1)
              TARGET_NAMESPACE=$(echo ${CIRCLE_TAG} | tr "-" "\n" | tail -n2 | head -n1)
              TARGET_ENV=$(echo ${CIRCLE_TAG} | tr "-" "\n" | tail -n3 | head -n1)
              CUT=-${TARGET_ENV}-${TARGET_NAMESPACE}-${SEM_VER}
              APP=${CIRCLE_TAG%"$CUT"}
            else
              echo "Error! Unrecognized tag"
            fi
            echo "export APP=${APP}" >> $BASH_ENV
            echo "export TARGET_ENV=${TARGET_ENV}" >> $BASH_ENV
            echo "export TARGET_NAMESPACE=${TARGET_NAMESPACE}" >> $BASH_ENV
            echo $APP
            echo $TARGET_ENV
            echo $TARGET_NAMESPACE
  set_apihost:
    description: based on environment set the APIHOST
    steps:
      - run:
          name: Setup APIHOST var
          command: |
            if [ $APP == 'blackcomb' ] || [ $APP == 'candyland' ]; then
              if [ ${TARGET_ENV} == 'uat' ]; then
                APIHOST="https://api-${TARGET_NAMESPACE}.${TARGET_ENV}.whistler.perxtech.io"
              elif [ ${TARGET_ENV} == 'staging' ]; then
                APIHOST="https://api.${TARGET_ENV}.whistler.perxtech.io"
              elif [ ${TARGET_ENV} == 'production' ]; then
                APIHOST="https://api.whistler.perxtech.io"
              fi
            else
              if [ ${TARGET_ENV} == 'staging' ]; then
                APIHOST="https://api.perxtech.io"
              elif [ ${TARGET_ENV} == 'production' ]; then
                if [ $APP == 'hsbc' ] || [ $APP == 'hsbc-rewards' ]
                then
                  APIHOST="https://api-hsbc.perxtech.net"
                else
                  APIHOST="https://api.perxtech.net"
                fi
              fi
            fi
            echo "export APIHOST=$APIHOST" >> $BASH_ENV
            echo $APIHOST
  set_preauth:
    description: based on client set the PREAUTH
    steps:
      - run:
          name: Setup PREAUTH var
          command: |
            if [ $APP == 'prudential' ] || [ $APP == 'digi' ] || [ $APP == 'blackcomb' ] || [ $APP == 'bpi' ]
            then
              PREAUTH="true"
            else
              PREAUTH="false"
            fi
            echo "export PREAUTH=$PREAUTH" >> $BASH_ENV
            echo $PREAUTH
  set_basehref:
    description: based on client set deploy endpoint base href
    steps:
      - run:
          name: Setup BASE_HREF var
          command: |
            if [ $APP == 'hsbc' ]
            then
              BASE_HREF="/site/hsbc/collect2/"
            elif [ $APP == 'hsbc-rewards' ]
            then
              BASE_HREF="/site/hsbc/rewardscatalogue/"
            else
              BASE_HREF="/"
            fi
            echo "export BASE_HREF=$BASE_HREF" >> $BASH_ENV
            echo $BASE_HREF

  set_iswhistler:
    description: based on client deploy endpoint base href
    steps:
      - run:
          name: Setup IS_WHISTLER var
          command: |
            if [ $APP == 'blackcomb' ]
            then
              IS_WHISTLER="true"
            else
              IS_WHISTLER="false"
            fi
            echo "export IS_WHISTLER=$IS_WHISTLER" >> $BASH_ENV
            echo $IS_WHISTLER
  setup_buildkitd:
    description: Enable docker experimental feature and setup buildkit environment
    steps:
      - run:
          name: Setup buildkit environment variable
          command: |
            echo 'export DOCKER_BUILDKIT=1' >> $BASH_ENV
  docker_login:
    description: Login to Dockerhub
    steps:
      - run:
          name: Login to dockerhub
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin

jobs:
  build_proxy_docker_image:
    working_directory: ~/project
    executor: ubuntu
    steps:
      - checkout
      - docker_login
      - run:
          name: Build docker image
          command: |
            cd ~/project/backend/api-proxy &&
            docker build . -t perxtech/engagements-proxy:${CIRCLE_TAG} -t perxtech/engagements-proxy
      - run:
          name: Push docker
          command: |
            docker push perxtech/engagements-proxy:${CIRCLE_TAG}
            docker push perxtech/engagements-proxy
  build_docker_image:
    working_directory: ~/project
    executor: ubuntu
    steps:
      - checkout
      - docker_login
      - get_app_name
      - set_apihost
      - set_preauth
      - set_basehref
      - set_iswhistler
      - run:
          name: Build docker image
          command: |
            echo "APP: ${APP}"
            echo "APIHOST: ${APIHOST}"
            echo "BASE_HREF: ${BASE_HREF}"
            echo "Docker Tag: ${CIRCLE_SHA1:0:7}"
            echo "Docker Tag: ${CIRCLE_SHA1:0:7}"
            echo "IS_WHISTLER: ${IS_WHISTLER}"
            if [ $APP == 'candyland' ]
            then
              export APP="candyland"
            fi
            echo "after second set APP: ${APP}"

            docker build . -t ${DOCKER_REPO}:${CIRCLE_TAG} \
            --no-cache \
            --build-arg app=$APP \
            --build-arg apihost=$APIHOST \
            --build-arg basehref=$BASE_HREF \
            --build-arg preauth=$PREAUTH \
            --build-arg iswhistler=$IS_WHISTLER
      - run:
          name: Push docker
          command: |
            docker push ${DOCKER_REPO}:${CIRCLE_TAG}
  deploy:
    executor: helm-deploy/default
    parameters:
      docker_tag:
        type: string
        description: The docker tag to deploy
        default: "${CIRCLE_SHA1:0:7}"
      kube_host:
        type: env_var_name
        description: host for kubeconfig
      kube_bearer_token:
        type: env_var_name
        description: breaker token for kubeconfig
      kube_cluster_ca_cert_data:
        type: env_var_name
        description: certificate data for kubeconfig
    steps:
      - get_app_name
      - run:
          name: Set environments
          command: |
            echo 'export DOCKER_TAG="<< parameters.docker_tag >>"' >> $BASH_ENV
            echo 'export HELM_REPO_URL=https://chartmuseum.perxtech.io' >> $BASH_ENV
            echo 'export HELM_APP="$APP"' >> $BASH_ENV

            if [ $APP == 'prudential' ]
            then
              echo 'export HELM_APP="$APP-birthday"' >> $BASH_ENV
            fi
            if [ $APP == 'hsbc' ]
            then
              echo 'export HELM_APP="$APP-collect2"' >> $BASH_ENV
            fi
            if [ $APP == 'digi' ]
            then
              echo 'export HELM_APP="$APP-minigames"' >> $BASH_ENV
            fi
            if [ $APP == 'bpi'  ] || \
               [ $APP == 'merck-customer' ] || \
               [ $APP == 'hkbn' ]
            then
              echo 'export HELM_APP="$APP-rewards"' >> $BASH_ENV
            fi
            if [ $APP == 'candyland' ] || \
               [ $APP == 'candyland-uat' ]
            then
              echo 'export HELM_APP="perx-$APP"' >> $BASH_ENV
            fi
            if [ $APP == 'merck-merchant' ]
            then
              echo 'export HELM_APP="$APP-scanner"' >> $BASH_ENV
            fi
      # requires env set: HELM_REPO_URL HELM_USER HELM_PASSWORD
      - helm-deploy/add-helm-repo:
          helm_repo_name: perx
      # requires env set: KUBE_HOST KUBE_CLUSTER_CA_CERT_DATA KUBE_BEARER_TOKEN
      - helm-deploy/configure-kubectl:
          kube_host: "<< parameters.kube_host >>"
          kube_bearer_token: "<< parameters.kube_bearer_token >>"
          kube_cluster_ca_cert_data: "<< parameters.kube_cluster_ca_cert_data >>"
      - helm-deploy/deploy:
          helm_release: microsite-apps-$HELM_APP
          helm_chart: perx/perx-general-app
          helm_values: image.tag="${DOCKER_TAG}"
          helm_extra_args: --reuse-values --timeout 600
  deploy-whistler:
    executor: helm-deploy/default
    parameters:
      docker_tag:
        type: string
        description: The docker tag to deploy
        default: "${CIRCLE_SHA1:0:7}"
      kube_host:
        type: env_var_name
        description: host for kubeconfig
      kube_bearer_token:
        type: env_var_name
        description: breaker token for kubeconfig
      kube_cluster_ca_cert_data:
        type: env_var_name
        description: certificate data for kubeconfig
    steps:
      - checkout
      - get_app_name
      - run:
          name: Set environments
          command: |
            echo 'export DOCKER_TAG="<< parameters.docker_tag >>"' >> $BASH_ENV
            echo 'export TILLER_NAMESPACE="${TARGET_NAMESPACE}"-whistler' >> $BASH_ENV
            echo 'export SKAFFOLD_NAMESPACE="${TARGET_NAMESPACE}"-whistler' >> $BASH_ENV
            echo 'export SKAFFOLD_DEFAULT_REPO=perxtech' >> $BASH_ENV
            echo 'export HELM_REPO_URL=https://rails-on-services.github.io/helm-charts' >> $BASH_ENV
            echo 'export HELM_APP="$APP"' >> $BASH_ENV
      - helm-deploy/add-helm-repo:
          helm_repo_name: ros
      - helm-deploy/configure-kubectl:
          kube_host: "<< parameters.kube_host >>"
          kube_bearer_token: "<< parameters.kube_bearer_token >>"
          kube_cluster_ca_cert_data: "<< parameters.kube_cluster_ca_cert_data >>"
      - run:
          name: Install skaffold
          command: |
            curl -Lo skaffold https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64
            chmod +x skaffold
      - run:
          name: Deploy microsite app and ingress
          command:
            ./skaffold deploy -f .circleci/skaffold/microsites-app-ng-${APP}.yaml --images perxtech/microsite-apps-ng
  test-e2e-protractor:
    docker:
      - image: circleci/node:10-browsers
    resource_class: xlarge
    steps:
      - checkout
      - run: yarn install
      - run: yarn run build:candyland:prod
      - run: yarn run pree2e-ci ## need to run webdriver-manager update before protractor e2e runs
      - run: yarn run e2e-ci-pro
  test:
    docker:
      - image: circleci/node:10-browsers
    resource_class: xlarge
    steps:
      - checkout
      - run: yarn install
      - run: yarn run lerna run build:lib
      - run: yarn run lerna run config
      - run: yarn run test-ci
 
#      - run: yarn run e2e-ci
  lint:
    docker:
      - image: circleci/node:10-browsers
    resource_class: xlarge
    steps:
      - checkout
      - run: yarn install
      - run: yarn run lint-ci
  build:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - run:
          name: Install yarn
          command: |
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo killall -9 apt-get || true && sudo apt-get update && sudo apt-get install -y yarn=1.16.0-1
      - run: |
          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
          echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Switch to latest node version
          command: |
            nvm install v10
            nvm alias default v10
      - checkout
      - run: yarn install
      - run: yarn run build
  build-prod:
    docker:
      - image: circleci/node:10-browsers
    resource_class: xlarge
    parallelism: 13
    steps:
      - checkout
      - run: yarn install
    #      - run: yarn run e2e-ci
      - run:
          command: |
            (cd apps; ls -d *) | circleci tests split | xargs -n 1 -I {} yarn build:{}:prod
workflows:
  build_and_deploy:
    jobs:
      - lint:
          filters:
            tags:
              # this enables circleci to trigger on tags
              only: /.*/
      - test:
          filters:
            tags:
              # this enables circleci to trigger on tags
              only: /.*/
      # - build:
      #     filters:
      #       tags:
      #         # this enables circleci to trigger on tags
      #         only: /.*/
      - build-prod:
          filters:
            tags:
              # this enables circleci to trigger on tags
              only: /.*/
      - build_docker_image:
          filters:
            tags:
              # this enables circleci to trigger on tags
              only: /^[\w-]+-(production|staging|uat)-(\w+-)?\d+\.\d+\.\d+.*/
            branches:
              ignore: /.*/
      - deploy-whistler:
          name: deploy_to_whistler_uat
          docker_tag: "${CIRCLE_TAG}"
          kube_host: WHISTLER_UAT_KUBE_HOST
          kube_cluster_ca_cert_data: WHISTLER_UAT_KUBE_CLUSTER_CA_CERT_DATA
          kube_bearer_token: WHISTLER_UAT_KUBE_BEARER_TOKEN
          requires:
            - build_docker_image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /(\w+-)+uat-(\w+)-\d+\.\d+\.\d+.*/
      - deploy-whistler:
          name: deploy_to_whistler_staging
          docker_tag: "${CIRCLE_TAG}"
          kube_host: WHISTLER_STAGING_KUBE_HOST
          kube_cluster_ca_cert_data: WHISTLER_STAGING_KUBE_CLUSTER_CA_CERT_DATA
          kube_bearer_token: WHISTLER_STAGING_KUBE_BEARER_TOKEN
          requires:
            - build_docker_image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /(\w+-)+staging-(\w+)-\d+\.\d+\.\d+.*/
      - deploy-whistler:
          name: deploy_to_whistler_production
          docker_tag: "${CIRCLE_TAG}"
          kube_host: WHISTLER_PRODUCTION_KUBE_HOST
          kube_bearer_token: WHISTLER_PRODUCTION_KUBE_BEARER_TOKEN
          kube_cluster_ca_cert_data: WHISTLER_PRODUCTION_KUBE_CLUSTER_CA_CERT_DATA
          requires:
            - build_docker_image
            # - build
            - test
          filters:
            # need to sepcify this otherwise the job will run even if there's no tag
            branches:
              ignore: /.*/
            tags:
              # semver v2
              only: /(\w+-)+production-(\w+)-\d+\.\d+\.\d+.*/
      - deploy:
          name: deploy_to_staging
          docker_tag: "${CIRCLE_TAG}"
          kube_host: STAGING_KUBE_HOST
          kube_cluster_ca_cert_data: STAGING_KUBE_CLUSTER_CA_CERT_DATA
          kube_bearer_token: STAGING_KUBE_BEARER_TOKEN
          requires:
            - build_docker_image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /(\w+-)+staging-\d+\.\d+\.\d+.*/
      - deploy:
          name: deploy_to_production
          docker_tag: "${CIRCLE_TAG}"
          kube_host: PRODUCTION_KUBE_HOST
          kube_bearer_token: PRODUCTION_KUBE_BEARER_TOKEN
          kube_cluster_ca_cert_data: PRODUCTION_KUBE_CLUSTER_CA_CERT_DATA
          requires:
            - build_docker_image
            # - build
            - test
            - lint
            - build-prod
          filters:
            # need to sepcify this otherwise the job will run even if there's no tag
            branches:
              ignore: /.*/
            tags:
              # semver v2
              only: /(\w+-)+production-\d+\.\d+\.\d+.*/
      - build_proxy_docker_image:
          filters:
            # need to sepcify this otherwise the job will run even if there's no tag
            branches:
              ignore: /.*/
            tags:
              # semver v2
              only: /engagements-proxy-\d+\.\d+\.\d+.*/

daily_e2e_run_morning:
    triggers:
      - schedule:
          # 12 noon SGT
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - test-e2e-protractor
daily_e2e_run_evening:
    triggers:
      - schedule:
          # 5.00 pm SGT
          cron: "0 9 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - test-e2e-protractor
