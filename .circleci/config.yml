version: 2.1
orbs:
  helm-deploy: perxtech/helm-deploy@0.0.4
executors:
  ubuntu:
    machine:
      image: ubuntu-1604:201903-01
      docker_layer_caching: << parameters.docker_layer_caching >>
    working_directory: ~/project
    parameters:
      docker_layer_caching:
        default: true
        type: boolean
commands:
  get_app_name:
    description: cuts app name out of git tag
    steps:
      - run:
          name: Setup env vars
          command: |
            APP=$(echo ${CIRCLE_TAG} | cut -d'-' -f 1)
            echo "export APP=$APP" >> $BASH_ENV
  get_env_from_tag:
    description: cuts destination environment out of git tag
    steps:
      - run:
          name: Setup env vars
          command: |
            TARGET_ENV=$(echo ${CIRCLE_TAG} | cut -d'-' -f 2)
            echo "export TARGET_ENV=$TARGET_ENV" >> $BASH_ENV
  set_apihost:
    description: based on environment set the APIHOST
    steps:
      - run:
          name: Setup APIHOST vars
          command: |
            if [ $TARGET_ENV == 'staging' ]
            then
              echo 'export APIHOST="https://api.perxtech.io"' >> $BASH_ENV
            fi
            if [ $TARGET_ENV == 'production' ]
            then
              if [ $APP == 'hsbc' ]
              then
                echo 'export APIHOST="https://api-hsbc.perxtech.net"' >> $BASH_ENV
              else
                echo 'export APIHOST="https://api.perxtech.net"' >> $BASH_ENV
              fi
            fi
  set_preauth:
    description: based on client set the PREAUTH
    steps:
      - run:
          name: Setup PREAUTH vars
          command: |
            echo 'export PREAUTH="false"' >> $BASH_ENV
            if [ $APP == 'prudential' ]
            then
              echo 'export PREAUTH="true"' >> $BASH_ENV
            fi
            if [ $APP == 'digi' ]
            then
              echo 'export PREAUTH="true"' >> $BASH_ENV
            fi
  set_basehref:
    description: based on client set deploy endpoint base href
    steps:
      - run:
          name: Setup BASE_HREF vars
          command: |
            if [ $APP == 'hsbc' ]
            then
              echo 'export BASE_HREF="/site/hsbc/collect2/"' >> $BASH_ENV
            else
              echo 'export BASE_HREF="/"' >> $BASH_ENV
            fi
  set_iswhistler:
    description: based on client deploy endpoint base href
    steps:
      - run:
          name: Setup BASE_HREF vars
          command: |
            echo 'export ISWHISTLER="false"' >> $BASH_ENV
  setup_buildkitd:
    description: Enable docker experimental feature and setup buildkit environment
    steps:
      - run:
          name: Setup buildkit environment variable
          command: |
            echo 'export DOCKER_BUILDKIT=1' >> $BASH_ENV
  docker_login:
    description: Login to Dockerhub
    steps:
      - run:
          name: Login to dockerhub
          command: echo ${DOCKERHUB_PASSWORD} | docker login -u ${DOCKERHUB_USER} --password-stdin

jobs:
  build_docker_image:
    working_directory: ~/project
    executor: ubuntu
    steps:
      - checkout
      - docker_login
      - get_app_name
      - get_env_from_tag
      - set_apihost
      - set_preauth
      - set_basehref
      - set_iswhistler
      - run:
          name: Build docker image
          command: |
            echo "APP: ${APP}"
            echo "APIHOST: ${APIHOST}"
            echo "BASE_HREF: ${BASE_HREF}"
            echo "Docker Tag: ${CIRCLE_SHA1:0:7}"
            docker build . -t ${DOCKER_REPO}:${CIRCLE_TAG} \
            --no-cache \
            --build-arg app=$APP \
            --build-arg apihost=$APIHOST \
            --build-arg basehref=$BASE_HREF \
            --build-arg preauth=$PREAUTH \
            --build-arg iswhistler=$ISWHISTLER
      - run:
          name: Push docker
          command: |
            docker push ${DOCKER_REPO}:${CIRCLE_TAG}
  deploy:
    executor: helm-deploy/default
    parameters:
      docker_tag:
        type: string
        description: The docker tag to deploy
        default: "${CIRCLE_SHA1:0:7}"
      kube_host:
        type: env_var_name
        description: host for kubeconfig
      kube_bearer_token:
        type: env_var_name
        description: breaker token for kubeconfig
      kube_cluster_ca_cert_data:
        type: env_var_name
        description: certificate data for kubeconfig
    steps:
      - get_app_name
      - run:
          name: Set environments
          command: |
            echo 'export DOCKER_TAG="<< parameters.docker_tag >>"' >> $BASH_ENV
            echo 'export HELM_REPO_URL=https://chartmuseum.perxtech.io' >> $BASH_ENV
            echo 'export HELM_APP="$APP"' >> $BASH_ENV

            if [ $APP == 'prudential' ]
            then
              echo 'export HELM_APP="$APP-birthday"' >> $BASH_ENV
            fi
            if [ $APP == 'hsbc' ]
            then
              echo 'export HELM_APP="$APP-collect2"' >> $BASH_ENV
            fi
            if [ $APP == 'digi' ]
            then
              echo 'export HELM_APP="$APP-minigames"' >> $BASH_ENV
            fi
            if [ $APP == 'bpi' ]
            then
              echo 'export HELM_APP="$APP-rewards"' >> $BASH_ENV
            fi
            if [ $APP == 'candyland' ]
            then
              echo 'export HELM_APP="perx-$APP"' >> $BASH_ENV
            fi
      # requires env set: HELM_REPO_URL HELM_USER HELM_PASSWORD
      - helm-deploy/add-helm-repo:
          helm_repo_name: perx
      # requires env set: KUBE_HOST KUBE_CLUSTER_CA_CERT_DATA KUBE_BEARER_TOKEN
      - helm-deploy/configure-kubectl:
          kube_host: "<< parameters.kube_host >>"
          kube_bearer_token: "<< parameters.kube_bearer_token >>"
          kube_cluster_ca_cert_data: "<< parameters.kube_cluster_ca_cert_data >>"
      - helm-deploy/deploy:
          helm_release: microsite-apps-$HELM_APP
          helm_chart: perx/perx-general-app
          helm_values: image.tag="${DOCKER_TAG}"
          helm_extra_args: --reuse-values --timeout 600
  test:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - run:
          name: Install yarn
          command: |
            curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
            echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list
            sudo apt-get update && sudo apt-get install -y yarn=1.16.0-1
      - run: |
          echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
          echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Switch to latest node version
          command: |
            nvm install v10
            nvm alias default v10
      - checkout
      - run: yarn install
      - run: yarn run build
      - run: yarn run lint-ci
      - run: yarn run test-ci
    #      - run: yarn run e2e-ci

workflows:
  build_and_deploy:
    jobs:
      - test:
          filters:
            tags:
              # this enables circleci to trigger on tags
              only: /.*/
      - build_docker_image:
          filters:
            tags:
              # this enables circleci to trigger on tags
              only: /^\w+-.*/
            branches:
              ignore: /.*/
      - deploy:
          name: deploy_to_staging
          docker_tag: "${CIRCLE_TAG}"
          kube_host: STAGING_KUBE_HOST
          kube_cluster_ca_cert_data: STAGING_KUBE_CLUSTER_CA_CERT_DATA
          kube_bearer_token: STAGING_KUBE_BEARER_TOKEN
          requires:
            - build_docker_image
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^\w+-staging-\d+\.\d+\.\d+.*/
      - deploy:
          name: deploy_to_production
          docker_tag: "${CIRCLE_TAG}"
          kube_host: PRODUCTION_KUBE_HOST
          kube_bearer_token: PRODUCTION_KUBE_BEARER_TOKEN
          kube_cluster_ca_cert_data: PRODUCTION_KUBE_CLUSTER_CA_CERT_DATA
          requires:
            - build_docker_image
            - test
          filters:
            # need to sepcify this otherwise the job will run even if there's no tag
            branches:
              ignore: /.*/
            tags:
              # semver v2
              only: /^\w+-production-\d+\.\d+\.\d+.*/

