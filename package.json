{
  "name": "perxtech",
  "scripts": {
    "start:server": "nx serve appauth-server",
    "build:abenson": "env-cmd -f apps/abenson/env/abenson ts-node --project tsconfig.node.json apps/abenson/set-env.ts && yarn nx build abenson --",
    "build:abenson:production": "env-cmd -f apps/abenson/env/abenson.production ts-node --project tsconfig.node.json apps/abenson/set-env.ts && yarn nx build abenson -- --prod",
    "build:abenson:staging": "env-cmd -f apps/abenson/env/abenson.staging ts-node --project tsconfig.node.json apps/abenson/set-env.ts && yarn nx build abenson --",
    "start:abenson:production": "env-cmd -f apps/abenson/env/abenson.production.dev ts-node --project tsconfig.node.json apps/abenson/set-env.ts && yarn nx serve abenson -- --prod",
    "start:abenson:staging": "env-cmd -f apps/abenson/env/abenson.staging.dev ts-node --project tsconfig.node.json apps/abenson/set-env.ts && yarn nx serve abenson --",
    "build:all-it:production": "env-cmd -f apps/all-it/env/all-it.production ts-node --project tsconfig.node.json apps/all-it/set-env.ts && yarn nx build all-it -- --prod",
    "build:all-it:staging": "env-cmd -f apps/all-it/env/all-it.staging ts-node --project tsconfig.node.json apps/all-it/set-env.ts && yarn nx build all-it -- --prod",
    "start:all-it:production": "env-cmd -f apps/all-it/env/all-it.production.dev ts-node --project tsconfig.node.json apps/all-it/set-env.ts && yarn nx serve all-it --",
    "start:all-it:staging": "env-cmd -f apps/all-it/env/all-it.staging.dev ts-node --project tsconfig.node.json apps/all-it/set-env.ts && yarn nx serve all-it --",
    "build:backend": "nx build appauth-server --prod",
    "build:bdo:production": "env-cmd -f apps/blackcomb/env/bdo.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:bdo:staging": "env-cmd -f apps/blackcomb/env/bdo.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:bdo:production": "env-cmd -f apps/blackcomb/env/bdo.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:bdo:staging": "env-cmd -f apps/blackcomb/env/bdo.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:blackcomb": "ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb --",
    "build:blackcomb:production": "env-cmd -f apps/blackcomb/env/blackcomb.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:blackcomb:staging": "env-cmd -f apps/blackcomb/env/blackcomb.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:bpi:production": "echo 'skipping bpi build'",
    "build:bpi:staging": "echo 'skipping bpi build'",
    "build:components-demo": "nx build components-demo --",
    "build:components-demo:production": "yarn build:components-demo:staging",
    "build:components-demo:staging": "yarn nx build components-demo -- --prod",
    "start:components-demo:staging": "nx serve components-demo --",
    "build:daiichi-dlvn:production": "env-cmd -f apps/blackcomb/env/daiichi-dlvn.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:daiichi-dlvn:staging": "env-cmd -f apps/blackcomb/env/daiichi-dlvn.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:daiichi-dlvn:production": "env-cmd -f apps/blackcomb/env/daiichi-dlvn.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:daiichi-dlvn:staging": "env-cmd -f apps/blackcomb/env/daiichi-dlvn.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:feature-demo:production": "yarn build:feature-demo:staging",
    "build:feature-demo:staging": "env-cmd -f apps/blackcomb/env/feature-demo.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:feature-demo:staging": "env-cmd -f apps/blackcomb/env/feature-demo.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:globeone:production": "env-cmd -f apps/blackcomb/env/globeone.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:globeone:staging": "env-cmd -f apps/blackcomb/env/globeone.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:globeone:production": "env-cmd -f apps/blackcomb/env/globeone.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:globeone:staging": "env-cmd -f apps/blackcomb/env/globeone.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:globeathome:production": "env-cmd -f apps/blackcomb/env/globeathome.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:globeathome:staging": "env-cmd -f apps/blackcomb/env/globeathome.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:globeathome:production": "env-cmd -f apps/blackcomb/env/globeathome.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:globeathome:staging": "env-cmd -f apps/blackcomb/env/globeathome.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:johnsen360:production": "env-cmd -f apps/blackcomb/env/johnsen360.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:johnsen360:production": "env-cmd -f apps/blackcomb/env/johnsen360.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:hkbn:production": "echo 'skipping hkbn build'",
    "build:hkbn:staging": "echo 'skipping hkbn build'",
    "start:hkbn:production": "env-cmd -f apps/hkbn/env/hkbn.production.dev ts-node --project tsconfig.node.json apps/hkbn/set-env.ts && yarn nx serve hkbn --",
    "start:hkbn:staging": "env-cmd -f apps/hkbn/env/hkbn.staging.dev ts-node --project tsconfig.node.json apps/hkbn/set-env.ts && yarn nx serve hkbn --",
    "build:hsbc-rewards:production": "echo 'skipping hsbc-rewards build'",
    "build:hsbc-rewards:staging": "echo 'skipping hsbc-rewards build'",
    "build:hsbc": "echo 'skipping hsbc-rewards build'",
    "build:hsbc:production": "echo 'skipping hsbc-rewards build'",
    "build:hsbc:staging": "echo 'skipping hsbc-rewards build'",
    "start:hsbc:production": "env-cmd -f apps/hsbc/env/hsbc.production.dev ts-node --project tsconfig.node.json apps/hsbc/set-env.ts && yarn nx serve hsbc --",
    "start:hsbc:staging": "env-cmd -f apps/hsbc/env/hsbc.staging.dev ts-node --project tsconfig.node.json apps/hsbc/set-env.ts && yarn nx serve hsbc --",
    "build:hsbcph-blackcomb:production": "env-cmd -f apps/blackcomb/env/hsbcph.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:hsbcph-blackcomb:staging": "env-cmd -f apps/blackcomb/env/hsbcph.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:hsbcph-blackcomb:production": "env-cmd -f apps/blackcomb/env/hsbcph.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:hsbcph-blackcomb:staging": "env-cmd -f apps/blackcomb/env/hsbcph.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:hsbchk:production": "echo 'skipping hsbchk build'",
    "build:hsbchk:staging": "echo 'skipping hsbchk build'",
    "start:hsbchk:production": "env-cmd -f apps/hsbchk/env/hsbchk.production.dev ts-node --project tsconfig.node.json apps/hsbchk/set-env.ts && yarn nx serve hsbchk --",
    "start:hsbchk:staging": "env-cmd -f apps/hsbchk/env/hsbchk.staging.dev ts-node --project tsconfig.node.json apps/hsbchk/set-env.ts && yarn nx serve hsbchk -- --configuration staging",
    "build:hsbcvn:production": "env-cmd -f apps/blackcomb/env/hsbcvn.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:hsbcvn:staging": "env-cmd -f apps/blackcomb/env/hsbcvn.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:hsbcvn:production": "env-cmd -f apps/blackcomb/env/hsbcvn.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:hsbcvn:staging": "env-cmd -f apps/blackcomb/env/hsbcvn.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:megaworld:production": "env-cmd -f apps/blackcomb/env/megaworld.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:megaworld:staging": "env-cmd -f apps/blackcomb/env/megaworld.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:megaworld:production": "env-cmd -f apps/blackcomb/env/megaworld.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:megaworld:staging": "env-cmd -f apps/blackcomb/env/megaworld.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:merck-customer": "ts-node --project tsconfig.node.json apps/merck-customer/set-env.ts && yarn nx build merck-customer --",
    "build:merck-customer:production": "env-cmd -f apps/merck-customer/env/merck-customer.production ts-node --project tsconfig.node.json apps/merck-customer/set-env.ts && yarn nx build merck-customer --  --prod",
    "build:merck-customer:staging": "env-cmd -f apps/merck-customer/env/merck-customer.staging ts-node --project tsconfig.node.json apps/merck-customer/set-env.ts && yarn nx build merck-customer -- --prod",
    "start:merck-customer:production": "env-cmd -f apps/merck-customer/env/merck-customer.production.dev ts-node --project tsconfig.node.json apps/merck-customer/set-env.ts && yarn nx serve merck-customer --",
    "start:merck-customer:staging": "env-cmd -f apps/merck-customer/env/merck-customer.staging.dev ts-node --project tsconfig.node.json apps/merck-customer/set-env.ts && yarn nx serve merck-customer --",
    "build:merck-merchant": "ts-node --project tsconfig.node.json apps/merck-merchant/set-env.ts && yarn nx build merck-merchant --",
    "build:merck-merchant:production": "env-cmd -f apps/merck-merchant/env/merck-merchant.production ts-node --project tsconfig.node.json apps/merck-merchant/set-env.ts && yarn nx build merck-merchant -- --prod",
    "build:merck-merchant:staging": "env-cmd -f apps/merck-merchant/env/merck-merchant.staging ts-node --project tsconfig.node.json apps/merck-merchant/set-env.ts && yarn nx build merck-merchant -- --prod",
    "start:merck-merchant:production": "env-cmd -f apps/merck-merchant/env/merck-merchant.production.dev ts-node --project tsconfig.node.json apps/merck-merchant/set-env.ts && yarn nx serve merck-merchant --",
    "start:merck-merchant:staging": "env-cmd -f apps/merck-merchant/env/merck-merchant.staging.dev ts-node --project tsconfig.node.json apps/merck-merchant/set-env.ts && yarn nx serve merck-merchant --",
    "build:oracle-demo:production": "yarn build:oracle-demo:staging",
    "build:oracle-demo:staging": "echo 'skipping oracle-demo build'",
    "start:oracle-demo:staging": "env-cmd -f apps/blackcomb/env/oracle-demo.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:oracle-pay:production": "echo 'skipping oracle-pay build'",
    "build:oracle-pay:staging": "echo 'skipping oracle-pay build'",
    "build:partners-demo:production": "env-cmd -f apps/blackcomb/env/partners-demo.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:partners-demo:production": "env-cmd -f apps/blackcomb/env/partners-demo.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:perx-demo:production": "env-cmd -f apps/blackcomb/env/perx-demo.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:perx-demo:staging": "env-cmd -f apps/blackcomb/env/perx-demo.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:perx-demo:production": "env-cmd -f apps/blackcomb/env/perx-demo.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:perx-demo:staging": "env-cmd -f apps/blackcomb/env/perx-demo.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:petron-demo:production": "echo 'skipping petron-demo build'",
    "build:philipssg:staging": "echo 'skipping philipssg build'",
    "build:philipssg:production": "echo 'skipping philipssg build'",
    "start:philipssg:staging": "env-cmd -f apps/philipssg/env/philipssg.staging.dev ts-node --project tsconfig.node.json apps/philipssg/set-env.ts && yarn nx serve philipssg --",
    "start:philipssg:production": "env-cmd -f apps/philipssg/env/philipssg.production.dev ts-node --project tsconfig.node.json apps/philipssg/set-env.ts && yarn nx serve philipssg --",
    "build:dbshk-agent:production": "env-cmd -f apps/dbshk-agent/env/dbshk-agent.production ts-node --project tsconfig.node.json apps/dbshk-agent/set-env.ts && yarn nx build dbshk-agent -- --prod",
    "build:dbshk-agent:staging": "env-cmd -f apps/dbshk-agent/env/dbshk-agent.staging ts-node --project tsconfig.node.json apps/dbshk-agent/set-env.ts && yarn nx build dbshk-agent -- --prod",
    "start:dbshk-agent:production": "env-cmd -f apps/dbshk-agent/env/dbshk-agent.production.dev ts-node --project tsconfig.node.json apps/dbshk-agent/set-env.ts && yarn nx serve dbshk-agent --",
    "start:dbshk-agent:staging": "env-cmd -f apps/dbshk-agent/env/dbshk-agent.staging.dev ts-node --project tsconfig.node.json apps/dbshk-agent/set-env.ts && yarn nx serve dbshk-agent --",
    "build:prudential:production": "echo 'skipping prudential build'",
    "build:prudential:staging": "echo 'skipping prudential build'",
    "build:razer:production": "env-cmd -f apps/blackcomb/env/razer.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:razer:staging": "env-cmd -f apps/blackcomb/env/razer.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:razer:staging": "env-cmd -f apps/blackcomb/env/razer.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:razer:production": "env-cmd -f apps/blackcomb/env/razer.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:starhub:production": "env-cmd -f apps/starhub/env/starhub.production ts-node --project tsconfig.node.json apps/starhub/set-env.ts && yarn nx build starhub -- --prod",
    "build:starhub:staging": "env-cmd -f apps/starhub/env/starhub.staging ts-node --project tsconfig.node.json apps/starhub/set-env.ts && yarn nx build starhub -- --configuration staging ",
    "start:starhub:production": "env-cmd -f apps/starhub/env/starhub.production.dev ts-node --project tsconfig.node.json apps/starhub/set-env.ts && yarn nx serve starhub -- --prod ",
    "start:starhub:staging": "env-cmd -f apps/starhub/env/starhub.staging.dev ts-node --project tsconfig.node.json apps/starhub/set-env.ts && yarn nx serve starhub --",
    "build:techfis:production": "env-cmd -f apps/blackcomb/env/techfis.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:techfis:production": "env-cmd -f apps/blackcomb/env/techfis.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:transcycle:production": "env-cmd -f apps/transcycle/env/transcycle.production ts-node --project tsconfig.node.json apps/transcycle/set-env.ts && yarn nx build transcycle -- --prod",
    "build:transcycle:staging": "env-cmd -f apps/transcycle/env/transcycle.staging ts-node --project tsconfig.node.json apps/transcycle/set-env.ts && yarn nx build transcycle -- --prod",
    "start:transcycle:production": "env-cmd -f apps/transcycle/env/transcycle.production.dev ts-node --project tsconfig.node.json apps/transcycle/set-env.ts && yarn nx serve transcycle --",
    "start:transcycle:staging": "env-cmd -f apps/transcycle/env/transcycle.staging.dev ts-node --project tsconfig.node.json apps/transcycle/set-env.ts && yarn nx serve transcycle --",
    "build:zeal:production": "env-cmd -f apps/blackcomb/env/zeal.production ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "build:zeal:staging": "env-cmd -f apps/blackcomb/env/zeal.staging ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx build blackcomb -- --prod",
    "start:zeal:staging": "env-cmd -f apps/blackcomb/env/zeal.staging.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "start:zeal:production": "env-cmd -f apps/blackcomb/env/zeal.production.dev ts-node --project tsconfig.node.json apps/blackcomb/set-env.ts && yarn nx serve blackcomb --",
    "build:lib": "echo 'nothing to do 😀'",
    "clean": "rm -rf ./dist ./node_modules **/*/dist **/*/node_modules **/*/coverage",
    "lint-ci": "nx run-many --target=lint --all",
    "lint-ci:fix": "nx run-many --target=lint --all --fix",
    "config": "ts-node --project tsconfig.node.json config.ts",
    "e2e-ci": "lerna run e2e -- --protractor-config=e2e/protractor-ci.conf.js",
    "e2e-ci-pro": "lerna run e2e-pro -- e2e/protractor-circle-ci.conf.js --protractor-config=e2e/protractor-circle-ci.conf.js",
    "pree2e-ci": "lerna run pree2e",
    "test-ci": "npm run config && yarn nx run-many --target=test --all --parallel",
    "test-ci:local": "nx run-many --target=test --all --parallel",
    "test:abenson": "nx test abenson",
    "test:all-it": "nx test all-it",
    "test:blackcomb": "nx test blackcomb",
    "test:bpi": "nx test bpi",
    "test:components-demo": "nx test components-demo",
    "test:dbshk-agent": "nx test dbshk-agent",
    "test:hkbn": "echo 'skipping hkbn tests'",
    "test:hsbc": "echo 'skipping old-hsbc tests'",
    "test:hsbc-rewards": "nx test hsbc-rewards",
    "test:hsbchk": "nx test hsbchk",
    "test:merck-customer": "nx test merck-customer",
    "test:merck-merchant": "nx test merck-merchant",
    "test:oracle-pay": "echo 'skipping oracle-pay tests'",
    "test:philipssg": "echo 'skipping philipssg tests'",
    "test:prudential": "echo 'skipping prudential tests'",
    "test:starhub": "nx test starhub",
    "test:appauth-server": "echo 'no tests'",
    "test:blackcomb-pages": "nx test blackcomb-pages",
    "test:core": "nx test core",
    "test:whistler": "nx test whistler",
    "test:transcycle": "nx test transcycle",
    "lint": "eslint --ext js,jsx src",
    "prettier": "prettier --write src/**/*.{ts,js,css,html}",
    "postinstall": "node ./decorate-angular-cli.js"
  },
  "husky": {
    "hooks": {
      "pre-commit": [
        "lint-staged"
      ]
    }
  },
  "lint-staged": {
    "*.{ts}": [
      "eslint --fix"
    ]
  },
  "private": true,
  "workspaces": [
    "apps/*",
    "libs/*",
    "backend/*"
  ],
  "devDependencies": {
    "@angular-devkit/build-angular": "0.901.15",
    "@angular-devkit/build-ng-packagr": "0.901.15",
    "@angular/cli": "9.1.15",
    "@angular/compiler-cli": "9.1.13",
    "@angular/language-service": "9.1.13",
    "@briebug/jest-schematic": "^2.1.1",
    "@nrwl/jest": "9.8.0",
    "@nrwl/linter": "9.8.0",
    "@nrwl/node": "9.8.0",
    "@nrwl/workspace": "9.8.0",
    "@types/cache-manager": "^2.10.0",
    "@types/compression": "^1.0.1",
    "@types/express": "^4.17.0",
    "@types/google.visualization": "0.0.48",
    "@types/googlemaps": "^3.37.0",
    "@types/jest": "25.1.5",
    "@types/node": "^12.11.1",
    "@types/uuid": "^7.0.2",
    "@typescript-eslint/eslint-plugin": "~2.3.0",
    "@typescript-eslint/eslint-plugin-tslint": "~2.3.0",
    "@typescript-eslint/parser": "^2.3.0",
    "codelyzer": "^5.1.2",
    "env-cmd": "^10.1.0",
    "eslint": "6.8.0",
    "eslint-config-prettier": "^6.13.0",
    "eslint-import-resolver-typescript": "^2.0.0",
    "eslint-plugin-import": "^2.19.1",
    "husky": "^4.3.0",
    "jest": "25.5.4",
    "jest-environment-jsdom-fourteen": "^1.0.1",
    "jest-preset-angular": "8.4.0",
    "lint-staged": "^10.4.2",
    "ng-packagr": "^9.0.0",
    "ngx-barcode": "^0.3.0",
    "prettier": "2.0.4",
    "protractor": "~5.4.0",
    "rxjs-compat": "^6.5.4",
    "rxjs-tslint": "0.1.5",
    "rxjs-tslint-rules": "^4.25.0",
    "stylelint": "^10.1.0",
    "stylelint-config-standard": "^18.3.0",
    "ts-jest": "25.5.1",
    "ts-loader": "^6.0.3",
    "ts-node": "^8.2.0",
    "tslint": "6.0.0",
    "tslint-consistent-codestyle": "^1.15.1",
    "tslint-no-focused-test": "^0.5.0",
    "typescript": "3.8.3",
    "webpack": "^4.35.0",
    "webpack-cli": "^3.3.4"
  },
  "dependencies": {
    "@angular/animations": "9.1.13",
    "@angular/cdk": "^9.2.4",
    "@angular/common": "9.1.13",
    "@angular/compiler": "9.1.13",
    "@angular/core": "9.1.13",
    "@angular/forms": "9.1.13",
    "@angular/localize": "~9.1.13",
    "@angular/material": "~9.2.4",
    "@angular/material-moment-adapter": "~9.2.4",
    "@angular/platform-browser": "9.1.13",
    "@angular/platform-browser-dynamic": "9.1.13",
    "@angular/router": "9.1.13",
    "@angular/service-worker": "9.1.13",
    "@ngx-formly/core": "5.x",
    "@ngx-formly/material": "^5.10.0",
    "@ngx-translate/core": "^11.0.1",
    "@ngx-translate/http-loader": "^4.0.0",
    "@sentry/browser": "^6.2.5",
    "@sentry/node": "^6.2.5",
    "@zxing/ngx-scanner": "^2.0.0",
    "angular2-text-mask": "^9.0.0",
    "angularx-qrcode": "~2.3.5",
    "axios": "^0.21.1",
    "cache-manager": "^2.10.0",
    "colors": "~1.0.3",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "dotenv": "^8.0.0",
    "express": "^4.17.1",
    "hammerjs": "^2.0.8",
    "jimp": "^0.8.5",
    "moment": "^2.29.1",
    "ng-mat-select-infinite-scroll": "^2.1.1",
    "ngx-auth": "^5.0.0",
    "ngx-cacheable": "^1.4.1",
    "ngx-currency": "2.5.1",
    "ngx-drag-scroll": "^9.0.0-beta.4",
    "ngx-infinite-scroll": "^8.0.1",
    "ngx-pinch-zoom": "^2.4.4",
    "regenerator-runtime": "^0.13.3",
    "rxjs": "6.5.5",
    "text-mask-addons": "^3.8.0",
    "ts-optchain": "^0.1.7",
    "tslib": "^1.10.0",
    "ttypescript": "^1.5.7",
    "uuid": "^7.0.2",
    "zone.js": "~0.10.2"
  },
  "optionalDependencies": {
    "canvas": "^2.6.1"
  }
}
