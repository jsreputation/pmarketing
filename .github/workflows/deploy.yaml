name: deploy
on:
  push:
    # branches:
    #   - master
    #   - DO-378/deploy-microsites-by-github-actions
    tags:
      - '*[0-9]+.[0-9]+.[0-9]+'
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout microsite-deploy
        uses: actions/checkout@v2
        with:
          repository: PerxTech/microsite-deploy
          ref: master
          token: ${{ secrets.MICROSITE_DEPLOY_TOKEN }}

      - name: Set environment variables
        run: |
          REGEX="([[:alnum:]-]+)-(staging|production)-?([[:alnum:]-]*)-([0-9]+\.[0-9]+\.[0-9]+-?[0-9]*)"
          echo "GITHUB_REF: ${GITHUB_REF}"
          if [[ "${GITHUB_REF}" =~ $REGEX ]]; then
            echo ::set-env name=APP::${BASH_REMATCH[1]}
            echo ::set-env name=TARGET_ENV::${BASH_REMATCH[2]}
            echo ::set-env name=SEM_VER::${BASH_REMATCH[4]}
            echo ::set-env name=DOCKER_TAG::${GITHUB_REF##*/}
          else
            echo "Error! Unrecognized tag"
            exit 1
          fi

      - name: Check env variables
        run: |
          echo "APP: $APP"
          echo "TARGET_ENV: $TARGET_ENV"
          echo "SEM_VER: $SEM_VER"
          echo "DOCKER_TAG: $DOCKER_TAG"

      - name: Login to Dockerhub
        run: |
          echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USER}} --password-stdin

      - name: Wait for docker image tag to be present
        run: |
          echo "Wait for docker image: $DOCKER_TAG"
            WAIT_TIME=0
            until docker run --rm -v ~/.docker:/root/.docker gcr.io/go-containerregistry/crane digest perxtech/microsite-apps-ng:$DOCKER_TAG || [ $WAIT_TIME -gt 900 ]; do
              (( WAIT_TIME+=5 ))
              sleep 5
            done

      - name: Generate kubeconfig
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.AWS_KUBE_CONFIG }}

      - name: Set kube context
        run: |
          kubectl config use-context ${TARGET_ENV}

      - name: Install sops
        env:
          SOPS_VERSION: 3.5.0
        run: |
          curl -LsS  https://github.com/mozilla/sops/releases/download/v${SOPS_VERSION}/sops_${SOPS_VERSION}_amd64.deb -o sops.deb && \
          sudo dpkg -i sops.deb

      - name: Install helm
        env:
          HELM_VERSION: 2.16.1
        run: |
          curl -LsSO https://get.helm.sh/helm-v${HELM_VERSION}-linux-amd64.tar.gz
          tar -zxvf helm-v${HELM_VERSION}-linux-amd64.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm
          helm init --client-only
          helm repo add perx https://chartmuseum.perxtech.io --username ${{ secrets.HELM_USER }} --password ${{ secrets.HELM_PASSWORD }}
          helm repo update

      - name: Install skaffold
        env:
          SKAFFOLD_VERSION: latest
        run: |
          curl -LsSo skaffold https://storage.googleapis.com/skaffold/releases/${SKAFFOLD_VERSION}/skaffold-linux-amd64
          chmod +x skaffold
          sudo mv skaffold /usr/local/bin

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo "Deploying ${APP}"
          make deploy

      - name: Invalidate Cloudfront distribution
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        if: contains( env.APP, 'hsbc' ) || contains( env.APP, 'hsbc-xmas' ) || contains( env.APP, 'hsbc-rewards' )
        run: |
          case $TARGET_ENV in
            production ) DISTRIBUTION_ID=E3NTONYLQET6VX;;
            staging    ) DISTRIBUTION_ID=ENIVGKPKYFPZI;;
            *          ) echo "Environment not supported"; exit 1;;
          esac
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"
