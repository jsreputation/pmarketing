name: build-prod
on: [pull_request]
jobs:
  build-prod:
    name: build-prod
    runs-on: ubuntu-latest
    steps:
      - name: Cancel redundant jobs
        uses: technote-space/auto-cancel-redundant-job@v1
      - uses: actions/checkout@v2
      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.AWS_BUILDER_KUBE_CONFIG }}
      - name: Check branch name
        run: |
          REGEX="[[:alpha:]]+-[[:digit:]]+"
          if [[ ! ${GITHUB_HEAD_REF} =~ ${REGEX} ]]; then
            echo "Branch name ${GITHUB_HEAD_REF} doesn't meet naming convention: ${REGEX}"
            exit 1
          fi
      - name: Get list of apps
        run: |
          APPS=$(cd apps; ls -d *)

          echo 'APPS<<EOF' >> "${GITHUB_ENV}"
          echo ${APPS[@]} >> "${GITHUB_ENV}"
          echo 'EOF' >> "${GITHUB_ENV}"
      - name: Download tekton cli and install parallel
        env:
          TEKTON_CLI_VERSION: 0.11.0
        run: |
          curl -L https://github.com/tektoncd/cli/releases/download/v${TEKTON_CLI_VERSION}/tkn_${TEKTON_CLI_VERSION}_Linux_x86_64.tar.gz \
          | sudo tar xzv -C /usr/local/bin tkn
          sudo apt-get install -y parallel

          # Set tekton label
          LABEL=$(echo ${GITHUB_REF//[^0-9a-zA-Z-_\.]/-} | cut -c-60)
          # Workaround to ensure label name ended with alphanumeric char
          LABEL+=0
          echo "TEKTON_LABEL=${LABEL}" >> "${GITHUB_ENV}"
      - name: Remove existing tasks
        run: |
          EXISTING_TASKS=$(kubectl -n build get taskrun -l github.ref=${TEKTON_LABEL},tekton.dev/task=microsite-apps-ng-build-prod -o=name)
          if [ ${#EXISTING_TASKS[@]} -ne 0 ]; then
            parallel kubectl -n build delete --ignore-not-found {} ::: ${EXISTING_TASKS[@]}
          else
            echo "No existing taskruns"
          fi
      - name: Create tekton tasks
        run: |
          declare -a TEKTON_TASKS
          for app in ${APPS[@]}; do
          TEKTON_TASK=$(cat <<EOT | kubectl -n build create -f - --output=jsonpath={.metadata.name}
          apiVersion: tekton.dev/v1beta1
          kind: TaskRun
          metadata:
            generateName: microsite-apps-ng-build-prod-${app}-
            labels:
              github.ref: ${TEKTON_LABEL}
              task: build
            annotations:
              cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
          spec:
            serviceAccountName: tekton
            taskRef:
              name: microsite-apps-ng-build-prod
            resources:
              inputs:
                - name: workspace
                  resourceSpec:
                    type: git
                    params:
                      - name: url
                        value: git@github.com:PerxTech/microsite-apps-ng.git
                      - name: revision
                        value: ${{ github.ref }}
            params:
              - name: app-name
                value: ${app}
            podTemplate:
              securityContext:
                runAsUser: 0
                runAsGroup: 0
              nodeSelector:
                dedicated: cpu-spot-pool
              tolerations:
                - key: "dedicated"
                  value: "build"
                  effect: "NoSchedule"
          EOT
          )
          TEKTON_TASKS+=(${TEKTON_TASK})
          done
          echo "Tasks: ${TEKTON_TASKS[@]}"

          echo 'TEKTON_TASKS<<EOF' >> "${GITHUB_ENV}"
          echo "${TEKTON_TASKS[@]}" >> "${GITHUB_ENV}"
          echo 'EOF' >> "${GITHUB_ENV}"
      - name: Check task result
        run: |
          start=$SECONDS
          FAILED=false
          FAILED_TASKS=""
          declare -a RUNNING_TASKS
          for TASK in ${TEKTON_TASKS[@]}; do
            RUNNING_TASKS+=(${TASK})
            echo "Added task ${TASK} to the list"
          done
           until [[ ${#RUNNING_TASKS[@]} -eq 0 ]] || [[ $(( SECONDS - start )) -gt 1200 ]]; do
            echo "Remaining tasks: ${#RUNNING_TASKS[@]}"
            for TASKRUN_NAME in ${RUNNING_TASKS[@]}; do
              REASON=$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')
              STATUS=$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].status}')
              if [[ "${REASON}" = "Succeeded" ]] && [[ "${STATUS}" = "True" ]]; then
                for i in "${!RUNNING_TASKS[@]}"; do
                  if [[ ${RUNNING_TASKS[i]} = $TASKRUN_NAME ]]; then
                    unset 'RUNNING_TASKS[i]'
                  fi
                done
                echo "TaskRun $TASKRUN_NAME got succeeded and deleted from TaskRuns array"
                continue
              fi
              if [[ "${REASON}" = "Failed" ]] && [[ "${STATUS}" = "False" ]]; then
                FAILED_TASKS+="Taskrun ${TASKRUN_NAME} is failed \n"
                FAILED=true
                echo "Taskrun ${TASKRUN_NAME} is failed, fail the job"
                for i in "${!RUNNING_TASKS[@]}"; do
                  if [[ ${RUNNING_TASKS[i]} = $TASKRUN_NAME ]]; then
                    unset 'RUNNING_TASKS[i]'
                  fi
                done
                echo "TaskRun $TASKRUN_NAME got failed and deleted from TaskRuns array"
                continue
              fi
              echo "Taskrun ${TASKRUN_NAME} reason is ${REASON}, status is ${STATUS}"
            done
            sleep 20
            echo "Running for $(( SECONDS - start )) seconds"
          done
          if [[ "${FAILED}" = "true" ]]; then
            echo "${FAILED_TASKS}"
            exit 1
          fi
          if [[ "${#RUNNING_TASKS[@]}" -gt 0 ]]; then
            echo ">>>> Timeout hit <<<<"
            exit 1
          fi
      - name: Display dashboard link ang generate error logs
        if: always()
        run: |
          touch build_error.log
          for TASKRUN_NAME in ${TEKTON_TASKS[@]}; do
            TASKRUN_STATUS=$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')
            if [ "${TASKRUN_STATUS}" = "Failed" ]; then
              echo ">>>> Taskrun ${TASKRUN_NAME} status is ${TASKRUN_STATUS} <<<<"
              echo "Follow dashboard link to get the details: http://tekton-dashboard.perxtech.io/#/namespaces/build/taskruns/${TASKRUN_NAME}"
              tkn -n build taskrun logs ${TASKRUN_NAME} -f | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" >> build_error.log
            fi
          done
      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: Build logs
          path: build_error.log
      - name: Taskruns cleanup
        if: always()
        run: |
          for TASKRUN_NAME in ${TEKTON_TASKS[@]}; do
            TASKRUN_STATUS=$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')
            echo ">>>> Taskrun ${TASKRUN_NAME} status is ${TASKRUN_STATUS} <<<<"
            if [ "${TASKRUN_STATUS}" = "Succeeded" ]; then
              echo ">>>> Deleting succeeded taskrun ${TASKRUN_NAME} <<<<"
              tkn -n build taskrun delete ${TASKRUN_NAME}
            fi
          done
