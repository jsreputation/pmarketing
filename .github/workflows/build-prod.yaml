name: build-prod
on: [pull_request]
jobs:
  build:
    name: build-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.BUILDER_KUBE_CONFIG }}
      # - name: Get changed folders
      #   run: |
      #     git -c protocol.version=2 fetch --no-tags --prune --no-recurse-submodules --depth=1 origin master
      #     PR=${GITHUB_REF/refs/remotes}
      #     CHANGED_FILES=$(git --no-pager diff --name-only remotes/origin/master...${PR})
      #     echo "Files changed:"
      #     echo "${CHANGED_FILES[@]}"
      #     APP_REGEX="apps\/([A-Za-z\-]+)\/"
      #     APPS=()
      #     for FILE in ${CHANGED_FILES[@]}; do
      #       if ! [[ ${FILE} =~ ${APP_REGEX} ]]; then
      #         APPS=$(cd apps; ls -d *)
      #         break
      #       else
      #         APP=${BASH_REMATCH[1]}
      #         if ! [[ ${APPS[@]} =~ ${APP} ]]; then
      #           APPS+=${APP}
      #         fi
      #       fi
      #     done
      #     echo "Apps to build:"
      #     echo "${APPS[@]}"
      - name: Check branch name
        run: |
          REGEX="[[:alpha:]]+-[[:digit:]]+"
          if [[ ! ${GITHUB_HEAD_REF} =~ ${REGEX} ]]; then
            echo "Branch name ${GITHUB_HEAD_REF} doesn't meet naming convention: ${REGEX}"
            exit 1
          fi
      - name: Get list of apps
        run: |
          APPS=$(cd apps; ls -d *)
          echo ::set-env name=APPS::${APPS[@]}
      - name: Download tekton cli and install parallel
        run: |
          curl -L https://github.com/tektoncd/cli/releases/download/v0.6.0/tkn_0.6.0_Linux_x86_64.tar.gz \
          | sudo tar xzv -C /usr/local/bin tkn
          # sudo apt-get --allow-releaseinfo-change update &&
          sudo apt-get install -y parallel
      - name: Remove existing tasks
        run: |
          EXISTING_TASKS=$(kubectl -n build get taskrun -l github.ref=${GITHUB_REF//[^0-9a-zA-Z-_\.]/-},tekton.dev/task=microsite-apps-ng-build-prod -o=name)
          if [ ${#EXISTING_TASKS[@]} -ne 0 ]; then
            parallel kubectl -n build delete {} ::: ${EXISTING_TASKS[@]}
          else
            echo "No existing taskruns"
          fi
      - name: Create tekton tasks
        run: |
          declare -a TEKTON_TASKS
          for app in ${APPS[@]}; do
          TEKTON_TASK=$(cat <<EOT | kubectl -n build create -f - --output=jsonpath={.metadata.name}
          apiVersion: tekton.dev/v1alpha1
          kind: TaskRun
          metadata:
            generateName: microsite-apps-ng-build-prod-${app}-
            labels:
              github.ref: ${GITHUB_REF//[^0-9a-zA-Z-_\.]/-}
          spec:
            serviceAccountName: tekton
            taskRef:
              name: microsite-apps-ng-build-prod
            inputs:
              resources:
                - name: workspace
                  resourceSpec:
                    type: git
                    params:
                      - name: url
                        value: git@github.com:PerxTech/microsite-apps-ng.git
                      - name: revision
                        value: ${{ github.ref }}
              params:
                - name: app-name
                  value: ${app}
            podTemplate:
              securityContext:
                runAsUser: 0
                runAsGroup: 0
              nodeSelector:
                dedicated: build
              tolerations:
                - key: "dedicated"
                  value: "build"
                  effect: "NoSchedule"
              affinity:
                nodeAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 1
                      preference:
                        matchExpressions:
                        - key: machine-type
                          operator: In
                          values:
                          - highcpu
          EOT
          )
          TEKTON_TASKS+=(${TEKTON_TASK})
          done
          echo "Tasks: ${TEKTON_TASKS[@]}"
          echo ::set-env name=TEKTON_TASKS::${TEKTON_TASKS[@]}
      - name: Wait for tekton task running
        run: |
          WAIT_TIME=0
          for TASKRUN_NAME in ${TEKTON_TASKS[@]}; do
            until [ "$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')" = "Running" ] || [ $WAIT_TIME -gt 600 ]; do
              echo "Waiting ${WAIT_TIME} seconds for tekton task: ${TASKRUN_NAME}"
              echo "Current task state: $(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')"
              (( WAIT_TIME+=3 ))
              sleep 3
            done
          done
      - name: Stream tekton logs
        run: |
          parallel tkn -n build taskrun logs -f {} ::: ${TEKTON_TASKS[@]}
      - name: Check task result
        run: |
          WAIT_TIME=0
          for TASKRUN_NAME in ${TEKTON_TASKS[@]}; do
            until [ "$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')" != "Running" ] || [ $WAIT_TIME -gt 180 ]; do
              (( WAIT_TIME+=1 ))
              echo "Task ${TASKRUN_NAME} is still running, wait for 1 second"
              sleep 1
            done
            REASON=$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath={.status.conditions[0].reason})
            if [ "$REASON" != "Succeeded" ]; then
              echo "Taskrun ${TASKRUN_NAME} status is ${REASON}, fail the job"
              exit 1
            fi
          done
      - name: Output Errors
        if: failure()
        run: |
          for TASKRUN_NAME in ${TEKTON_TASKS[@]}; do
            if [ "$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')" != "Succeeded" ]; then
              tkn -n build taskrun logs ${TASKRUN_NAME} -f
            fi
          done
      - name: Taskruns cleanup
        if: always()
        run: |
          for TASKRUN_NAME in ${TEKTON_TASKS[@]}; do
            tkn -n build taskrun delete ${TASKRUN_NAME}
          done
