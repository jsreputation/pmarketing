name: lint
on: [pull_request]
jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.BUILDER_KUBE_CONFIG }}
      - name: Check branch name
        run: |
          REGEX="[[:alpha:]]+-[[:digit:]]+"
          if [[ ! ${GITHUB_HEAD_REF} =~ ${REGEX} ]]; then
            echo "Branch name ${GITHUB_HEAD_REF} doesn't meet naming convention: ${REGEX}"
            exit 1
          fi
      - name: Download tekton cli and install parallel
        run: |
          curl -L https://github.com/tektoncd/cli/releases/download/v0.6.0/tkn_0.6.0_Linux_x86_64.tar.gz \
          | sudo tar xzv -C /usr/local/bin tkn
          # sudo apt-get --allow-releaseinfo-change update &&
          sudo apt-get install -y parallel

          # Set tekton label
          LABEL=$(echo ${GITHUB_REF//[^0-9a-zA-Z-_\.]/-} | cut -c-60)
          echo ::set-env name=TEKTON_LABEL::${LABEL}
      - name: Remove existing tasks
        run: |
          EXISTING_TASKS=$(kubectl -n build get taskrun -l github.ref=${TEKTON_LABEL},tekton.dev/task=microsite-apps-ng-lint -o=name)
          if [ ${#EXISTING_TASKS[@]} -ne 0 ]; then
            parallel kubectl -n build delete {} ::: ${EXISTING_TASKS[@]}
          else
            echo "No existing taskruns"
          fi
      - name: Create tekton task
        run: |
          TEKTON_TASK=$(cat <<EOT | kubectl -n build create -f - --output=jsonpath={.metadata.name}
          apiVersion: tekton.dev/v1alpha1
          kind: TaskRun
          metadata:
            generateName: microsite-apps-ng-lint-
            labels:
              github.ref: ${TEKTON_LABEL}
              task: lint
          spec:
            serviceAccountName: tekton
            taskRef:
              name: microsite-apps-ng-lint
            inputs:
              resources:
                - name: workspace
                  resourceSpec:
                    type: git
                    params:
                      - name: url
                        value: git@github.com:PerxTech/microsite-apps-ng.git
                      - name: revision
                        value: ${{ github.ref }}
            podTemplate:
              securityContext:
                runAsUser: 0
                runAsGroup: 0
              nodeSelector:
                dedicated: build
              tolerations:
                - key: "dedicated"
                  value: "build"
                  effect: "NoSchedule"
          EOT
          )
          echo "Task: ${TEKTON_TASK}"
          echo ::set-env name=TASKRUN_NAME::${TEKTON_TASK}
      - name: Check task result
        run: |
          start=$SECONDS
          until [[ $(( SECONDS - start )) -gt 1200 ]]; do
            REASON=$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')
            STATUS=$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].status}')
            if [[ "${REASON}" = "Succeeded" ]] && [[ "${STATUS}" = "True" ]]; then
              exit 0
            fi
            if [[ "${REASON}" = "Failed" ]] && [[ "${STATUS}" = "False" ]]; then
              echo "Taskrun ${TASKRUN_NAME} is failed, fail the job"
              exit 1
            fi
            echo "Taskrun ${TASKRUN_NAME} reason is ${REASON}, status is ${STATUS}"
            sleep 20
            echo "Running for $(( SECONDS - start )) seconds"
          done
      - name: Display dashboard link
        if: always()
        run: |
          touch lint_error.log
          TASKRUN_STATUS=$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')
          if [ "${TASKRUN_STATUS}" = "Failed" ]; then
            echo ">>>> Taskrun ${TASKRUN_NAME} status is ${TASKRUN_STATUS} <<<<"
            echo "Follow dashboard link to get the details: http://tekton-dashboard.perxtech.io/#/namespaces/build/taskruns/${TASKRUN_NAME}"
            tkn -n build taskrun logs ${TASKRUN_NAME} -f >> lint_error.log
          fi
      - name: Upload lint log
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: Lint logs
          path: lint_error.log
      - name: Taskruns cleanup
        if: always()
        run: |
          if [ "$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')" == "Succeeded" ]; then
              tkn -n build taskrun delete ${TASKRUN_NAME}
          fi
