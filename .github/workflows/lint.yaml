name: lint
on: [pull_request]
jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      # checkout is not needed since it's performed inside tekton taskrun
      # - uses: actions/checkout@master
      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.BUILDER_KUBE_CONFIG }}
      - name: Check branch name
        run: |
          REGEX="[[:alpha:]]+-[[:digit:]]+"
          if [[ ! ${GITHUB_HEAD_REF} =~ ${REGEX} ]]; then
            echo "Branch name ${GITHUB_HEAD_REF} doesn't meet naming convention: ${REGEX}"
            exit 1
          fi
      - name: Download tekton cli and install parallel
        run: |
          curl -L https://github.com/tektoncd/cli/releases/download/v0.6.0/tkn_0.6.0_Linux_x86_64.tar.gz \
          | sudo tar xzv -C /usr/local/bin tkn
          # sudo apt-get --allow-releaseinfo-change update &&
          sudo apt-get install -y parallel

          # Set tekton label
          LABEL=${GITHUB_REF//[^0-9a-zA-Z-_\.]/-} | cut -c-60
          echo ::set-env name=TEKTON_LABEL::${LABEL}
      - name: Remove existing tasks
        run: |
          EXISTING_TASKS=$(kubectl -n build get taskrun -l github.ref=${TEKTON_LABEL},tekton.dev/task=microsite-apps-ng-lint -o=name)
          if [ ${#EXISTING_TASKS[@]} -ne 0 ]; then
            parallel kubectl -n build delete {} ::: ${EXISTING_TASKS[@]}
          else
            echo "No existing taskruns"
          fi
      - name: Create tekton task
        run: |
          TEKTON_TASK=$(cat <<EOT | kubectl -n build create -f - --output=jsonpath={.metadata.name}
          apiVersion: tekton.dev/v1alpha1
          kind: TaskRun
          metadata:
            generateName: microsite-apps-ng-lint-
            labels:
              github.ref: ${TEKTON_LABEL}
              task: lint
          spec:
            serviceAccountName: tekton
            taskRef:
              name: microsite-apps-ng-lint
            inputs:
              resources:
                - name: workspace
                  resourceSpec:
                    type: git
                    params:
                      - name: url
                        value: git@github.com:PerxTech/microsite-apps-ng.git
                      - name: revision
                        value: ${{ github.ref }}
            podTemplate:
              securityContext:
                runAsUser: 0
                runAsGroup: 0
              nodeSelector:
                dedicated: build
              tolerations:
                - key: "dedicated"
                  value: "build"
                  effect: "NoSchedule"
              affinity:
                nodeAffinity:
                  preferredDuringSchedulingIgnoredDuringExecution:
                    - weight: 1
                      preference:
                        matchExpressions:
                        - key: machine-type
                          operator: In
                          values:
                          - highcpu
          EOT
          )
          echo "Task: ${TEKTON_TASK}"
          echo ::set-env name=TASKRUN_NAME::${TEKTON_TASK}
      - name: Wait for tekton task running
        run: |
          echo "Wait for tekton task: ${TASKRUN_NAME}"
          WAIT_TIME=0
          until [ "$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')" = "Running" ] || [ $WAIT_TIME -gt 180 ]; do
            echo "Waiting ${WAIT_TIME} seconds for tekton task: ${TASKRUN_NAME}"
            echo "Current task state: $(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')"
            (( WAIT_TIME+=5 ))
            sleep 5
          done
      - name: Stream task log
        run: |
          echo "Tekton taskrun name: ${TASKRUN_NAME}"
          tkn -n build taskrun logs -f ${TASKRUN_NAME}
      - name: Check task result
        run: |
          # wait 10s for task to transit from running
          WAIT_TIME=0
          until [ "$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')" != "Running" ] || [ $WAIT_TIME -gt 30 ]; do
            (( WAIT_TIME+=1 ))
            echo "Task ${TASKRUN_NAME} is still running, wait for 1 second"
            sleep 1
          done
          REASON=$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath={.status.conditions[0].reason})
          if [ "$REASON" != "Succeeded" ] ; then
            echo "Taskrun ${TASKRUN_NAME} status is ${REASON}, fail the job"
            exit 1
          fi
      - name: Taskruns cleanup
        if: always()
        run: |
          if [ "$(kubectl -n build get taskrun ${TASKRUN_NAME} --output=jsonpath='{.status.conditions[0].reason}')" == "Succeeded" ]; then
              tkn -n build taskrun delete ${TASKRUN_NAME}
          fi
